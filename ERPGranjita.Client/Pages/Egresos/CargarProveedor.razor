@page "/egresos/proveedores"
@inject HttpClient Http
@layout ERPGranjita.Client.Pages.Egresos.EgresosLayout

<style>
    .proveedor-card {
        max-width: 600px;
        width: 100%;
        border-radius: 2rem;
        box-shadow: 0 6px 32px rgba(0,0,0,0.10), 0 1.5px 4px rgba(0,0,0,0.10);
        background: #fff;
        padding: 2.5rem 2rem;
        margin: 2rem auto;
    }

    .proveedor-header {
        color: #C80000;
    }

    .proveedor-card .form-label {
        font-weight: 600;
        color: #C80000;
    }

    .proveedor-card .form-control, .proveedor-card .form-select {
        border-radius: 0.75rem;
        font-size: 1.05rem;
    }

    .proveedor-card .btn-primary {
        background: linear-gradient(90deg, #C80000 0%, #FF6A12 100%);
        border: none;
        border-radius: 0.75rem;
        font-size: 1.2rem;
        font-weight: 700;
        box-shadow: 0 2px 8px rgba(200,0,0,0.08);
        transition: background 0.2s;
    }

        .proveedor-card .btn-primary:hover {
            background: #FF6A12;
        }

    .proveedor-card .alert {
        border-radius: 1rem;
        font-size: 1.1rem;
    }

    .proveedor-card .table {
        border-radius: 1rem;
        overflow: hidden;
        margin-top: 2rem;
    }

        .proveedor-card .table thead {
            background: linear-gradient(90deg, #C80000 0%, #FF6A12 100%);
            color: #fff;
            font-weight: 600;
        }

    .form-row {
        display: flex;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }

        .form-row > .form-group {
            flex: 1 1 200px;
            min-width: 180px;
        }

    .form-actions {
        display: flex;
        gap: 1.5rem;
        align-items: end;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }

        .form-actions > .form-group {
            flex: 2 1 300px;
            min-width: 180px;
        }

        .form-actions > .btn {
            flex: 1 1 120px;
            min-width: 120px;
            margin-top: 0.5rem;
        }

    @@media (max-width: 767px) {
        .proveedor-card

    {
        padding: 1rem 0.5rem;
    }

    .form-row, .form-actions {
        flex-direction: column;
        gap: 1rem;
    }

    }
</style>

<div class="d-flex justify-content-center align-items-center min-vh-100">
    <div class="proveedor-card">
        <div class="text-center mb-4">
            <h2 class="mb-3 proveedor-header">
                <i class="bi bi-person-plus"></i> Cargar Proveedor
            </h2>
            <p class="lead mb-4">Registra un nuevo proveedor para tus compras.</p>
        </div>
        <EditForm Model="@nuevoProveedor" OnValidSubmit="GuardarProveedor">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">Nombre</label>
                    <InputText @bind-Value="nuevoProveedor.Nombre" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="form-label">Teléfono</label>
                    <InputText @bind-Value="nuevoProveedor.Telefono" class="form-control" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">CUIT</label>
                    <InputText @bind-Value="nuevoProveedor.CUIT" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="form-label">Dirección</label>
                    <InputText @bind-Value="nuevoProveedor.Direccion" class="form-control" />
                </div>
            </div>
            <div class="form-actions">
                <div class="form-group">
                    <label class="form-label">Rubro</label>
                    <InputSelect @bind-Value="nuevoProveedor.RubroId" class="form-select">
                        <option value="">Seleccione...</option>
                        @foreach (var rubro in rubros)
                        {
                            <option value="@rubro.Id">@rubro.Nombre</option>
                        }
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                    <i class="bi bi-save"></i> @(isSaving ? "Guardando..." : "Guardar")
                </button>
            </div>
            @if (!string.IsNullOrEmpty(mensaje))
            {
                <div class="alert alert-success mt-3">@mensaje</div>
            }
            @if (!string.IsNullOrEmpty(errorMensaje))
            {
                <div class="alert alert-danger mt-3">@errorMensaje</div>
            }
        </EditForm>

        @if (proveedores == null)
        {
            <div class="text-secondary mt-4">Cargando proveedores...</div>
        }
        else if (proveedores.Count == 0)
        {
            <div class="alert alert-warning mt-4">No hay proveedores registrados.</div>
        }
        else
        {
            <table class="table table-striped table-hover align-middle shadow-sm">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Teléfono</th>
                        <th>CUIT</th>
                        <th>Dirección</th>
                        <th>Rubro</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in proveedores)
                    {
                        <tr>
                            <td>@p.Nombre</td>
                            <td>@p.Telefono</td>
                            <td>@p.CUIT</td>
                            <td>@p.Direccion</td>
                            <td>@p.Rubro?.Nombre</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<ERPGranjita.Shared.Models.Proveedor>? proveedores;
    private ERPGranjita.Shared.Models.Proveedor nuevoProveedor = new();
    private bool isSaving = false;
    private string mensaje = "";
    private string errorMensaje = "";

    private List<Rubro> rubros = new();

    protected override async Task OnInitializedAsync()
    {
        await CargarRubros();
        await CargarProveedores();
    }

    private async Task GuardarProveedor()
    {
        isSaving = true;
        mensaje = "";
        errorMensaje = "";
        try
        {
            var response = await Http.PostAsJsonAsync("api/proveedores", nuevoProveedor);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Proveedor guardado correctamente";
                await CargarProveedores();
                nuevoProveedor = new();
            }
            else
            {
                errorMensaje = "Error al guardar el proveedor.";
            }
        }
        catch (Exception ex)
        {
            errorMensaje = "Error al conectar con la API: " + ex.Message;
        }
        isSaving = false;
    }

    private async Task CargarProveedores()
    {
        try
        {
            proveedores = await Http.GetFromJsonAsync<List<ERPGranjita.Shared.Models.Proveedor>>("api/proveedores");
        }
        catch
        {
            proveedores = new List<ERPGranjita.Shared.Models.Proveedor>();
            errorMensaje = "Error al cargar proveedores desde la API.";
        }
    }

    private async Task CargarRubros()
    {
        try
        {
            rubros = await Http.GetFromJsonAsync<List<Rubro>>("api/rubros") ?? new();
        }
        catch
        {
            rubros = new List<Rubro>();
        }
    }
}